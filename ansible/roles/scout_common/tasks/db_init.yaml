- name: Setup PostgreSQL database and user
  when: not aws_deployment
  delegate_to: localhost
  block:
    - name: Create user (ignore if exists)
      kubernetes.core.k8s_exec:
        namespace: '{{ postgres_cluster_namespace }}'
        pod: '{{ postgres_cluster_name }}-1'
        command: |
          psql --dbname=postgres -c "CREATE ROLE {{db_user}} LOGIN PASSWORD {{ db_pass }}"
      register: user_result
      failed_when:
        - user_result.rc != 0
        - '"already exists" not in user_result.stderr'

- name: Create database (ignore if exists)
  when: not aws_deployment
  delegate_to: localhost
  kubernetes.core.k8s_exec:
    namespace: '{{ postgres_cluster_namespace }}'
    pod: '{{ postgres_cluster_name }}-1'
    command: |
      psql --dbname=postgres -c "CREATE DATABASE {{db_name}} OWNER {{ db_user }}"
  register: db_result
  failed_when:
    - db_result.rc != 0
    - '"already exists" not in db_result.stderr'


###
### RDS Initialization
###

- name: Configuring defaults for RDS initialization job
  delegate_to: localhost
  when: aws_deployment
  ansible.builtin.set_fact:
    db_init_sslmode: "{{ vars.get('db_sslmode', 'require') }}"
    db_init_namespace: "{{ vars.get('db_init_namespace', 'db-init') }}"
    db_init_psql_conn: "host={{ vars.get('db_host') }} port={{ vars.get('db_port', 5432) }} dbname=postgres user={{ vars.get('postgres_superuser', 'postgres') }} sslmode={{ vars.get('db_sslmode', 'require') }}"
    db_init_sql_script: |
      \set ON_ERROR_STOP on

      SELECT CASE
        WHEN NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = '{{ db_user }}')
          THEN format('CREATE ROLE %I LOGIN PASSWORD %L', '{{ db_user }}', '{{ db_pass }}')
        ELSE
          format('ALTER ROLE %I WITH LOGIN PASSWORD %L', '{{ db_user }}', '{{ db_pass }}')
      END;
      \gexec

      GRANT {{ db_user }} TO CURRENT_USER;

      SELECT 'CREATE DATABASE {{db_name}} OWNER {{ db_user }}'
      WHERE NOT EXISTS (SELECT 1 FROM pg_database WHERE datname = '{{db_name}}');
      \gexec

      REVOKE {{ db_user }} FROM CURRENT_USER;

- name: Ensure db-init namespace exists
  delegate_to: localhost  
  when: aws_deployment
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ db_init_namespace }}"

- name: Calculating unique job name for RDS initialization
  delegate_to: localhost
  when: aws_deployment
  ansible.builtin.set_fact:
    db_init_job_name: "db-init-{{ (db_name | default('init')) | regex_replace('[^a-z0-9-]','-') }}-{{ lookup('pipe', 'date +%s') }}"

- name: Submit RDS init job
  delegate_to: localhost
  when: aws_deployment
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: batch/v1
      kind: Job
      metadata:
        name: "{{ db_init_job_name }}"
        namespace: "{{ db_init_namespace }}"
        labels:
          app: db-init
          service: "{{ service_name | default('init') }}"
      spec:
        ttlSecondsAfterFinished: 300
        backoffLimit: 0
        template:
          metadata:
            labels:
              job-name: "{{ db_init_job_name }}"
          spec:
            restartPolicy: Never
            containers:
              - name: psql
                image: postgres:16
                env:
                  - name: PGPASSWORD
                    value: "{{ postgres_superuser_password }}"
                command:
                  - sh
                  - -lc
                  - |
                    set -e
                    cat <<'SQL' | psql "{{ db_init_psql_conn }}"
                    {{ db_init_sql_script }}
                    SQL

- name: Wait for RDS init job to complete
  delegate_to: localhost
  when: aws_deployment
  kubernetes.core.k8s_info:
    api_version: batch/v1
    kind: Job
    namespace: "{{ db_init_namespace }}"
    name: "{{ db_init_job_name }}"
    wait: true
    wait_condition:
      type: Complete
      status: "True"
    wait_sleep: 2
    wait_timeout: 300
  register: _job_info

- name: Fail if Job failed (RDS)
  delegate_to: localhost
  when:
    - aws_deployment
    - (_job_info.resources[0].status.failed | default(0) | int) > 0
  ansible.builtin.fail:
    msg: "RDS init Job {{ db_init_job_name }} failed. Check pod logs."

- name: Cleanup RDS init job
  when: aws_deployment
  kubernetes.core.k8s:
    state: absent
    api_version: batch/v1
    kind: Job
    name: "{{ db_init_job_name }}"
    namespace: "{{ db_init_namespace }}"
    wait: true
    wait_timeout: 120
    delete_options:
      propagationPolicy: Background
